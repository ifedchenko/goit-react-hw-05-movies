{"version":3,"file":"static/js/792.9814138c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieList/MoviesList.module.css?7a3b","components/MovieList/MovieList.jsx","services/fetchSearchMovies.js","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"trendingMovieItem\":\"MoviesList_trendingMovieItem__utfjt\",\"trendingMovieList\":\"MoviesList_trendingMovieList__gJX6Y\"};","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css';\n\nconst MoviesListItems = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={css.trendingMovieList}>\n      {movies?.map(movie => (\n        <li className={css.trendingMovieItem} key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <Card sx={{ width: 200 }}>\n              <CardMedia\n                sx={{ height: 300 }}\n                image={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                title={movie.title}\n              />\n              <CardContent sx={{ height: 30 }}>\n                <Typography sx={{ fontSize: 14 }} component=\"div\">\n                  {movie.title}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesListItems.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesListItems;\n","import axios from 'axios';\n\nconst API_KEY = '77cc72e96f7fab7310e90a268c6bf448';\n\nconst fetchSearchMovies = query => {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n    )\n    .then(response => response.data);\n};\n\nexport default fetchSearchMovies;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"searchInput\":\"SearchBar_searchInput__S8ff+\",\"searchButton\":\"SearchBar_searchButton__hgPYE\"};","import css from './SearchBar.module.css';\nimport { useState ,useEffect} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ onSubmit }) => {\n  const location = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const query = urlParams.get('query');\n    \n    if (query) {\n      setSearchQuery(query);\n    }\n  }, [location]);\n\n  const handleSearch = e => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (searchQuery.trim() === '') {\n      alert('Enter movie name');\n      return;\n    }\n\n    onSubmit(searchQuery);\n  };\n\n  return (\n    <div className={css.searchBar}>\n      <form onSubmit={handleSubmit} className={css.searchForm}>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          value={searchQuery}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter movie name\"\n          onChange={handleSearch}\n          className={css.searchInput}\n        />\n        <button type=\"submit\" className={css.searchButton}>\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport fetchSearchMovies from 'services/fetchSearchMovies';\nimport MovieList from 'components/MovieList/MovieList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoaderShown, setIsLoaderShown] = useState(false);\n\n  const location = useLocation();\n  const searchRequest = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchRequest || searchParams === null) return;\n\n    async function fetchMovies() {\n      try {\n        setIsLoaderShown(true);\n        const data = await fetchSearchMovies(searchRequest);\n        if (!data.results.length) {\n          error('No movies found!');\n        }\n        setMovies(data.results);\n      } catch (error) {\n        setError('Ooops. Something went wrong...');\n        console.log(error);\n      } finally {\n        setIsLoaderShown(false);\n      }\n    }\n\n    fetchMovies();\n  }, [error, searchParams, searchRequest]);\n\n  function onSubmit(value) {\n    setSearchParams({ query: `${value}` });\n  }\n\n  return (\n    <div className=\"moviesPage\">\n      <h1>Movies search</h1>\n      {isLoaderShown && !error && 'Loading ...'}\n      {error && <div>{error}</div>}\n      <SearchBar onSubmit={onSubmit} />\n      {movies && <MovieList movies={movies} prevLocation={location} />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","className","css","map","movie","to","id","state","from","Card","sx","width","CardMedia","height","image","poster_path","title","CardContent","Typography","fontSize","component","query","axios","then","response","data","onSubmit","useState","searchQuery","setSearchQuery","useEffect","URLSearchParams","search","get","e","preventDefault","trim","alert","type","name","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","isLoaderShown","setIsLoaderShown","searchRequest","fetchSearchMovies","results","length","console","log","fetchMovies","MovieList","prevLocation"],"sourceRoot":""}